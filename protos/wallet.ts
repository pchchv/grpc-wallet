// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.12.4
// source: protos/wallet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface CreateAddressRequest {
}

export interface CreateAddressResponse {
  address: string;
}

export interface TransactionRequest {
  toAddress: string;
  points: number;
  metadata: string;
}

export interface TransactionResponse {
  transactionId: number;
}

export interface BalanceRequest {
  address: string;
}

export interface BalanceResponse {
  total: number;
  available: number;
}

export interface WalletInfoRequest {
  address: string;
}

export interface WalletInfoResponse {
  total: number;
  available: number;
  transactions: Transaction[];
}

export interface Transaction {
  toAddress: string;
  points: number;
  metadata: string;
}

function createBaseCreateAddressRequest(): CreateAddressRequest {
  return {};
}

export const CreateAddressRequest: MessageFns<CreateAddressRequest> = {
  encode(_: CreateAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateAddressRequest {
    return {};
  },

  toJSON(_: CreateAddressRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAddressRequest>, I>>(base?: I): CreateAddressRequest {
    return CreateAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAddressRequest>, I>>(_: I): CreateAddressRequest {
    const message = createBaseCreateAddressRequest();
    return message;
  },
};

function createBaseCreateAddressResponse(): CreateAddressResponse {
  return { address: "" };
}

export const CreateAddressResponse: MessageFns<CreateAddressResponse> = {
  encode(message: CreateAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAddressResponse {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: CreateAddressResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAddressResponse>, I>>(base?: I): CreateAddressResponse {
    return CreateAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAddressResponse>, I>>(object: I): CreateAddressResponse {
    const message = createBaseCreateAddressResponse();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseTransactionRequest(): TransactionRequest {
  return { toAddress: "", points: 0, metadata: "" };
}

export const TransactionRequest: MessageFns<TransactionRequest> = {
  encode(message: TransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toAddress !== "") {
      writer.uint32(10).string(message.toAddress);
    }
    if (message.points !== 0) {
      writer.uint32(16).int32(message.points);
    }
    if (message.metadata !== "") {
      writer.uint32(26).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.points = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionRequest {
    return {
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: TransactionRequest): unknown {
    const obj: any = {};
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.points !== 0) {
      obj.points = Math.round(message.points);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionRequest>, I>>(base?: I): TransactionRequest {
    return TransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionRequest>, I>>(object: I): TransactionRequest {
    const message = createBaseTransactionRequest();
    message.toAddress = object.toAddress ?? "";
    message.points = object.points ?? 0;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseTransactionResponse(): TransactionResponse {
  return { transactionId: 0 };
}

export const TransactionResponse: MessageFns<TransactionResponse> = {
  encode(message: TransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== 0) {
      writer.uint32(8).int64(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.transactionId = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionResponse {
    return { transactionId: isSet(object.transactionId) ? globalThis.Number(object.transactionId) : 0 };
  },

  toJSON(message: TransactionResponse): unknown {
    const obj: any = {};
    if (message.transactionId !== 0) {
      obj.transactionId = Math.round(message.transactionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionResponse>, I>>(base?: I): TransactionResponse {
    return TransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionResponse>, I>>(object: I): TransactionResponse {
    const message = createBaseTransactionResponse();
    message.transactionId = object.transactionId ?? 0;
    return message;
  },
};

function createBaseBalanceRequest(): BalanceRequest {
  return { address: "" };
}

export const BalanceRequest: MessageFns<BalanceRequest> = {
  encode(message: BalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalanceRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: BalanceRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BalanceRequest>, I>>(base?: I): BalanceRequest {
    return BalanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BalanceRequest>, I>>(object: I): BalanceRequest {
    const message = createBaseBalanceRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseBalanceResponse(): BalanceResponse {
  return { total: 0, available: 0 };
}

export const BalanceResponse: MessageFns<BalanceResponse> = {
  encode(message: BalanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.available !== 0) {
      writer.uint32(16).int64(message.available);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BalanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.available = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalanceResponse {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      available: isSet(object.available) ? globalThis.Number(object.available) : 0,
    };
  },

  toJSON(message: BalanceResponse): unknown {
    const obj: any = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.available !== 0) {
      obj.available = Math.round(message.available);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BalanceResponse>, I>>(base?: I): BalanceResponse {
    return BalanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BalanceResponse>, I>>(object: I): BalanceResponse {
    const message = createBaseBalanceResponse();
    message.total = object.total ?? 0;
    message.available = object.available ?? 0;
    return message;
  },
};

function createBaseWalletInfoRequest(): WalletInfoRequest {
  return { address: "" };
}

export const WalletInfoRequest: MessageFns<WalletInfoRequest> = {
  encode(message: WalletInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletInfoRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: WalletInfoRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletInfoRequest>, I>>(base?: I): WalletInfoRequest {
    return WalletInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletInfoRequest>, I>>(object: I): WalletInfoRequest {
    const message = createBaseWalletInfoRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseWalletInfoResponse(): WalletInfoResponse {
  return { total: 0, available: 0, transactions: [] };
}

export const WalletInfoResponse: MessageFns<WalletInfoResponse> = {
  encode(message: WalletInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.available !== 0) {
      writer.uint32(16).int64(message.available);
    }
    for (const v of message.transactions) {
      Transaction.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.total = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.available = longToNumber(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.transactions.push(Transaction.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletInfoResponse {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      available: isSet(object.available) ? globalThis.Number(object.available) : 0,
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => Transaction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WalletInfoResponse): unknown {
    const obj: any = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.available !== 0) {
      obj.available = Math.round(message.available);
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => Transaction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletInfoResponse>, I>>(base?: I): WalletInfoResponse {
    return WalletInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletInfoResponse>, I>>(object: I): WalletInfoResponse {
    const message = createBaseWalletInfoResponse();
    message.total = object.total ?? 0;
    message.available = object.available ?? 0;
    message.transactions = object.transactions?.map((e) => Transaction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { toAddress: "", points: 0, metadata: "" };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toAddress !== "") {
      writer.uint32(10).string(message.toAddress);
    }
    if (message.points !== 0) {
      writer.uint32(16).int32(message.points);
    }
    if (message.metadata !== "") {
      writer.uint32(26).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.points = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.points !== 0) {
      obj.points = Math.round(message.points);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.toAddress = object.toAddress ?? "";
    message.points = object.points ?? 0;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

export type WalletService = typeof WalletService;
export const WalletService = {
  createAddress: {
    path: "/Wallet/createAddress",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAddressRequest) => Buffer.from(CreateAddressRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateAddressRequest.decode(value),
    responseSerialize: (value: CreateAddressResponse) => Buffer.from(CreateAddressResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateAddressResponse.decode(value),
  },
  transaction: {
    path: "/Wallet/transaction",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TransactionRequest) => Buffer.from(TransactionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TransactionRequest.decode(value),
    responseSerialize: (value: TransactionResponse) => Buffer.from(TransactionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TransactionResponse.decode(value),
  },
  balance: {
    path: "/Wallet/balance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BalanceRequest) => Buffer.from(BalanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BalanceRequest.decode(value),
    responseSerialize: (value: BalanceResponse) => Buffer.from(BalanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BalanceResponse.decode(value),
  },
  walletInfo: {
    path: "/Wallet/walletInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WalletInfoRequest) => Buffer.from(WalletInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => WalletInfoRequest.decode(value),
    responseSerialize: (value: WalletInfoResponse) => Buffer.from(WalletInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WalletInfoResponse.decode(value),
  },
} as const;

export interface WalletServer extends UntypedServiceImplementation {
  createAddress: handleUnaryCall<CreateAddressRequest, CreateAddressResponse>;
  transaction: handleUnaryCall<TransactionRequest, TransactionResponse>;
  balance: handleUnaryCall<BalanceRequest, BalanceResponse>;
  walletInfo: handleUnaryCall<WalletInfoRequest, WalletInfoResponse>;
}

export interface WalletClient extends Client {
  createAddress(
    request: CreateAddressRequest,
    callback: (error: ServiceError | null, response: CreateAddressResponse) => void,
  ): ClientUnaryCall;
  createAddress(
    request: CreateAddressRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateAddressResponse) => void,
  ): ClientUnaryCall;
  createAddress(
    request: CreateAddressRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateAddressResponse) => void,
  ): ClientUnaryCall;
  transaction(
    request: TransactionRequest,
    callback: (error: ServiceError | null, response: TransactionResponse) => void,
  ): ClientUnaryCall;
  transaction(
    request: TransactionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TransactionResponse) => void,
  ): ClientUnaryCall;
  transaction(
    request: TransactionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TransactionResponse) => void,
  ): ClientUnaryCall;
  balance(
    request: BalanceRequest,
    callback: (error: ServiceError | null, response: BalanceResponse) => void,
  ): ClientUnaryCall;
  balance(
    request: BalanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BalanceResponse) => void,
  ): ClientUnaryCall;
  balance(
    request: BalanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BalanceResponse) => void,
  ): ClientUnaryCall;
  walletInfo(
    request: WalletInfoRequest,
    callback: (error: ServiceError | null, response: WalletInfoResponse) => void,
  ): ClientUnaryCall;
  walletInfo(
    request: WalletInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WalletInfoResponse) => void,
  ): ClientUnaryCall;
  walletInfo(
    request: WalletInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WalletInfoResponse) => void,
  ): ClientUnaryCall;
}

export const WalletClient = makeGenericClientConstructor(WalletService, "Wallet") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): WalletClient;
  service: typeof WalletService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
